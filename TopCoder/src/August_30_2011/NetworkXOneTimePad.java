package August_30_2011;

import java.util.ArrayList;
import java.util.HashSet;

import javax.swing.text.PlainDocument;

public class NetworkXOneTimePad {
	
	HashSet<String> keys = new HashSet<String>();
	
	public static void main ( String args[] ) {
		long start = System.currentTimeMillis();
		NetworkXOneTimePad t = new NetworkXOneTimePad();
		String p[] = {};
		String c[] = {};
		
		
		System.out.println(t.crack(p,c));
		long end = System.currentTimeMillis();
		System.out.println((end-start)+" ms");
	}
	
	public String getKey ( String plain , String cipher ) {
		String result = "";
		for ( int i = 0 ; i < plain.length() ; ++i ) {
			if ( plain.charAt(i) == '1' && cipher.charAt(i) == '0' ) {
				result += '1';
			}
			if ( plain.charAt(i) == '1' && cipher.charAt(i) == '1' ) {
				result += '0';
			}
			if ( plain.charAt(i) == '0' && cipher.charAt(i) == '1' ) {
				result += '1';
			}
			if ( plain.charAt(i) == '0' && cipher.charAt(i) == '0' ) {
				result += '0';
			}
		}
		return result;
	}
	
	public String getXOR ( String plain , String key ) {
		String result = "";
		for ( int i = 0 ; i < plain.length() ; ++i ) {
			result += plain.charAt(i) == key.charAt(i) ? "0" : "1";
		}
		return result;
	}
	
	public int crack(String[] plaintexts, String[] ciphertexts) {
		int counter = 0;
		for ( int i = 0 ; i < plaintexts.length ; ++i ) {
			if ( checkMaping(plaintexts, ciphertexts, i, 0) ) {
					++counter;
				}
		}
		return counter;
	}
	
	public boolean checkMaping ( String[] plaintexts, String[] ciphertexts , int i , int k ) {
		String key = getXOR(plaintexts[i],ciphertexts[k]);
		if ( keys.contains(key) ) {
			return false;
		}
		String possible[] = new String[plaintexts.length];
		for ( int m = 0 ; m < plaintexts.length ; ++m ) {
			possible[m] = getXOR(plaintexts[m], key);
		}
		for ( int m = 0 ; m < ciphertexts.length ; ++m ) {
			int p;
			for ( p = 0 ; p < possible.length ; ++p ) {
				if ( ciphertexts[m].equals(possible[p]) ) {
					break;
				}
			}
			if ( p == possible.length ) {
				return false;
			}
		}
		keys.add(key);
		return true;
	}

}
